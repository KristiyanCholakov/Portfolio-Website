[
  {
    "id": "portfolio-website",
    "title": "Modern Developer Portfolio",
    "description": "A sleek, interactive, and feature‑rich portfolio website built with Next.js and Framer Motion, designed to showcase a developer's skills, projects, and contact information.",
    "longDescription": "This portfolio website features an engaging, interactive UI powered by Framer Motion, with advanced visual effects such as a matrix background, hexagonal patterns, and neural network simulations. It offers a responsive design optimized for all device sizes, a filterable and sortable project grid with dynamic category and technology filters, an interactive tech‑stack visualization, and a fully integrated contact form with client‑side validation.\n\nBuilt with Next.js (app router) and TypeScript, the project follows industry‑standard architecture: reusable UI components, static data for projects and skills, and global utility styles. Styled with Tailwind CSS and enhanced by Three.js and Lucide React icons, it maintains code quality via ESLint and Prettier and is optimized for deployment on Vercel for performance and SEO.",
    "thumbnail": "./projects/portfolio-website.png",
    "technologies": [
      "Next.js",
      "React",
      "Tailwind CSS",
      "Framer Motion",
      "Lucide React",
      "Three.js",
      "ESLint",
      "Prettier",
      "TypeScript"
    ],
    "category": "Web Development",
    "featured": true,
    "github": "https://github.com/KristiyanCholakov/Portfolio-Website",
    "demo": "https://kristiyancholakov.com",
    "completed": "2025-04"
  },
  {
    "id": "linkedin-game-agents",
    "title": "LinkedIn Game Agents",
    "description": "A fully automated puzzle‑solving agent for LinkedIn’s Queens, Tango, and Zip games combining computer vision and algorithmic reasoning.",
    "longDescription": "This project implements end‑to‑end agents that play LinkedIn’s visual logic puzzles—Queens, Tango, and Zip—automatically. It uses Selenium to capture game screens, OpenCV and Pillow for image processing, pytesseract for OCR, and scikit‑learn for clustering. A modular core (base_game_agent and game_registry) dynamically loads each game’s solver, recognizer, and placer components.\n\nEach game employs specialized vision and algorithmic strategies: Queens uses edge filters, Hough transforms, and DBSCAN color clustering to enforce placement constraints; Tango leverages adaptive thresholding, KMeans clustering, and template matching with backtracking to respect sign‑based rules; Zip applies adaptive grid detection, dynamic OCR, wall detection, and a Hamiltonian path solver to traverse numbered cells under movement constraints.",
    "thumbnail": "./projects/linkedin-game-agents.png",
    "technologies": [
      "Python",
      "NumPy",
      "OpenCV",
      "Pillow",
      "pytesseract",
      "scikit-learn",
      "Selenium"
    ],
    "category": "Data Science",
    "featured": false,
    "github": "https://github.com/KristiyanCholakov/LinkedIn-Games-Agents",
    "demo": "https://www.youtube.com/watch?v=XvmLhvoARe0",
    "completed": "2025-04"
  }
]